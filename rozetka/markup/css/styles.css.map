{"version":3,"sources":["_reset.scss","styles.css","_vars.scss","_common.scss","_header.scss","_landing-page.scss","_include-media.scss","fonts.scss"],"names":[],"mappings":"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","file":"styles.css","sourcesContent":["html {\r\n\tfont-size: 10px;\r\n}\r\n\r\n*,\r\n*:before,\r\n*:after {\r\n\tbox-sizing: border-box;\r\n}\r\n\r\nbody {\r\n\tmargin: 0;\r\n\tmin-width: 320px;\r\n\tbackground: $body-bg;\r\n\tcolor: $text-color-base;\r\n\tfont: $font-weight-base #{$font-size-base}/ $line-height-base $font-family-base;\r\n\tfont-smoothing: antialiased;\r\n\ttext-rendering: optimizeLegibility;\r\n\t-webkit-font-smoothing: antialiased;\r\n\t-moz-osx-font-smoothing: grayscale;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\r\n\t&.overflow-disabled,\r\n\t&.menu-opened {\r\n\t\toverflow: hidden;\r\n\t}\r\n}\r\n\r\na {\r\n\ttext-decoration: none;\r\n\tcolor: $links-color-base;\r\n\ttransition: $transition;\r\n}\r\n\r\na:hover {\r\n\ttext-decoration: underline;\r\n}\r\n\r\ninput {\r\n\toutline: none;\r\n}\r\n\r\nbutton,\r\ninput[type=\"search\"],\r\ninput[type=\"button\"],\r\ninput[type=\"reset\"],\r\ninput[type=\"submit\"] {\r\n\t-webkit-appearance: none;\r\n\tcursor: pointer;\r\n\ttransition: $transition;\r\n}\r\n\r\nbutton::-moz-focus-inner,\r\ninput[type=\"reset\"]::-moz-focus-inner,\r\ninput[type=\"button\"]::-moz-focus-inner,\r\ninput[type=\"submit\"]::-moz-focus-inner {\r\n\tborder: none;\r\n\tpadding: 0;\r\n}\r\n\r\n.wrapper {\r\n\tmin-height: 100vh;\r\n\tmin-height: calc(var(--vh, 1vh) * 100);\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n}\r\n\r\n#main {\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tflex-grow: 1;\r\n}\r\n\r\np {\r\n\tmargin-top: 0;\r\n}\r\n\r\nh1,\r\nh2,\r\nh3,\r\nh4,\r\nh5 {\r\n\tmargin-top: 0;\r\n}\r\n","html {\n\tfont-size: 10px;\n}\n\n*,\n*:before,\n*:after {\n\tbox-sizing: border-box;\n}\n\nbody {\n\tmargin: 0;\n\tmin-width: 320px;\n\tbackground: white;\n\tcolor: black;\n\tfont: 400 1.7rem/1.5 \"SF Pro Display\";\n\tfont-smoothing: antialiased;\n\ttext-rendering: optimizeLegibility;\n\t-webkit-font-smoothing: antialiased;\n\t-moz-osx-font-smoothing: grayscale;\n\tdisplay: flex;\n\tflex-direction: column;\n}\nbody.overflow-disabled, body.menu-opened {\n\toverflow: hidden;\n}\n\na {\n\ttext-decoration: none;\n\tcolor: inherit;\n\ttransition: all 0.3s ease;\n}\n\na:hover {\n\ttext-decoration: underline;\n}\n\ninput {\n\toutline: none;\n}\n\nbutton,\ninput[type=search],\ninput[type=button],\ninput[type=reset],\ninput[type=submit] {\n\t-webkit-appearance: none;\n\tcursor: pointer;\n\ttransition: all 0.3s ease;\n}\n\nbutton::-moz-focus-inner,\ninput[type=reset]::-moz-focus-inner,\ninput[type=button]::-moz-focus-inner,\ninput[type=submit]::-moz-focus-inner {\n\tborder: none;\n\tpadding: 0;\n}\n\n.wrapper {\n\tmin-height: 100vh;\n\tmin-height: calc(var(--vh, 1vh) * 100);\n\tdisplay: flex;\n\tflex-direction: column;\n}\n\n#main {\n\tdisplay: flex;\n\tflex-direction: column;\n\tflex-grow: 1;\n}\n\np {\n\tmargin-top: 0;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5 {\n\tmargin-top: 0;\n}\n\n.container {\n\tmax-width: 130rem;\n\twidth: 100%;\n\tmargin: auto;\n}\n\n.sr-only {\n\tposition: absolute !important;\n\twidth: 1px !important;\n\theight: 1px !important;\n\tpadding: 0 !important;\n\tmargin: -1px !important;\n\toverflow: hidden !important;\n\tclip: rect(0, 0, 0, 0) !important;\n\twhite-space: nowrap !important;\n\tborder: 0 !important;\n}\n\n/* header */\n.landing-page .header-page {\n\tdisplay: flex;\n\tjustify-content: center;\n\tpadding-top: 11.3rem;\n\tpadding-bottom: 5.6rem;\n}\n@media (max-width: 767px) {\n\t.landing-page .header-page {\n\t\tpadding-top: 3.5rem;\n\t\tpadding-bottom: 3.5rem;\n\t}\n}\n.landing-page .header-page .logo {\n\tmax-width: 26.8rem;\n\tdisplay: inline-flex;\n}\n@media (max-width: 767px) {\n\t.landing-page .header-page .logo {\n\t\tmax-width: 15rem;\n\t}\n}\n.landing-page .text-holder {\n\tfont-weight: 600;\n\tfont-size: 7.112rem;\n\tline-height: 1.23;\n}\n@media (max-width: 1199px) {\n\t.landing-page .text-holder {\n\t\tfont-size: 5.112rem;\n\t}\n}\n@media (max-width: 767px) {\n\t.landing-page .text-holder {\n\t\tfont-size: 2.5112rem;\n\t}\n}\n@media (max-width: 575px) {\n\t.landing-page .text-holder {\n\t\tfont-size: 2.112rem;\n\t}\n}\n.landing-page .text-holder p {\n\tmargin-bottom: 0;\n}\n.landing-page .text-holder.txt-center {\n\ttext-align: center;\n}\n.landing-page .text-holder.txt-1 {\n\tpadding-top: 1.7rem;\n}\n.landing-page .text-holder.txt-2 {\n\tmax-width: 105rem;\n\tmargin: auto auto 14.2rem;\n}\n@media (max-width: 767px) {\n\t.landing-page .text-holder.txt-2 {\n\t\tmargin: auto auto 7.2rem;\n\t}\n}\n.landing-page .text-holder.txt-3 {\n\tmargin-bottom: 3.2rem;\n}\n.landing-page .text-holder.txt-4 {\n\tmargin-bottom: 8.2rem;\n}\n@media (max-width: 767px) {\n\t.landing-page .text-holder.txt-4 {\n\t\tmargin-bottom: 4.2rem;\n\t}\n}\n.landing-page .img-block {\n\tdisplay: flex;\n\tjustify-content: center;\n}\n.landing-page .img-block .holder-1 {\n\tmax-width: 97rem;\n\tmargin-bottom: 1.7rem;\n}\n.landing-page .img-block .holder-2 {\n\tmax-width: 120rem;\n\tmargin-bottom: 16rem;\n}\n@media (max-width: 767px) {\n\t.landing-page .img-block .holder-2 {\n\t\tmargin-bottom: 8rem;\n\t}\n}\n.landing-page .img-block .holder-3 {\n\tmax-width: 120rem;\n\tmargin-bottom: 11rem;\n}\n@media (max-width: 767px) {\n\t.landing-page .img-block .holder-3 {\n\t\tmargin-bottom: 5.5rem;\n\t}\n}\n.landing-page .img-block .holder-4 {\n\tmax-width: 120rem;\n\tmargin-bottom: 11.2rem;\n}\n@media (max-width: 767px) {\n\t.landing-page .img-block .holder-4 {\n\t\tmargin-bottom: 5.5rem;\n\t}\n}\n.landing-page img {\n\twidth: 100%;\n\theight: auto;\n}\n.landing-page .list-block {\n\tpadding-left: 1rem;\n\tpadding-right: 1rem;\n\tpadding-bottom: 12.3rem;\n\toverflow: hidden;\n}\n@media (max-width: 767px) {\n\t.landing-page .list-block {\n\t\tpadding-bottom: 6rem;\n\t\ttext-align: center;\n\t}\n}\n.landing-page .list-block .inner-holder {\n\tmax-width: 77.1rem;\n\tmargin: auto;\n}\n@media (min-width: 769px) {\n\t.landing-page .list-block .row {\n\t\tdisplay: flex;\n\t\tmargin-left: -3.9rem;\n\t\tmargin-right: -3.9rem;\n\t}\n}\n@media (min-width: 769px) {\n\t.landing-page .list-block .row .col {\n\t\twidth: 100%;\n\t\tpadding-left: 3.9rem;\n\t\tpadding-right: 3.9rem;\n\t}\n}\n.landing-page .list-block ul {\n\tmargin: 0;\n\tpadding: 0;\n\tlist-style: none;\n\tfont-size: 2.5rem;\n\tline-height: 1.24;\n}\n@media (max-width: 767px) {\n\t.landing-page .list-block ul {\n\t\tfont-size: 1.7rem;\n\t}\n}\n.landing-page .list-block ul li {\n\tposition: relative;\n}\n.landing-page .list-block ul li:not(:last-child) {\n\tmargin-bottom: 4.7rem;\n\tpadding-bottom: 3.9rem;\n}\n.landing-page .list-block ul li:not(:last-child)::after {\n\tcontent: \"\";\n\tposition: absolute;\n\tleft: 0;\n\tbottom: 0;\n\twidth: 14.2rem;\n\theight: 0;\n\tborder-bottom: solid 0.1rem black;\n}\n@media (max-width: 767px) {\n\t.landing-page .list-block ul li:not(:last-child)::after {\n\t\tleft: 50%;\n\t\ttransform: translateX(-50%);\n\t}\n}\n\n@font-face {\n\tfont-family: \"SF Pro Display\";\n\tsrc: url(\"../fonts/SFProDisplay-Semibold.woff2\") format(\"woff2\"), url(\"../fonts/SFProDisplay-Semibold.woff\") format(\"woff\");\n\tfont-weight: 600;\n\tfont-style: normal;\n\tfont-display: swap;\n}\n@font-face {\n\tfont-family: \"SF Pro Display\";\n\tsrc: url(\"../fonts/SFProDisplay-Regular.woff2\") format(\"woff2\"), url(\"../fonts/SFProDisplay-Regular.woff\") format(\"woff\");\n\tfont-weight: normal;\n\tfont-style: normal;\n\tfont-display: swap;\n}","$fonts: \"../fonts/\";\r\n\r\n// fonts\r\n$main-font: \"SF Pro Display\";\r\n\r\n// breakpoints\r\n$breakpoints: (\r\n\tsm: 576px,\r\n\tmd: 768px,\r\n\tlg: 992px,\r\n\txl: 1200px\r\n);\r\n\r\n// base vars\r\n$text-color-base: black;\r\n$body-bg: white;\r\n$font-family-base: $main-font;\r\n$font-size-base: 1.7rem;\r\n$font-weight-base: 400;\r\n$line-height-base: 1.5;\r\n$links-color-base: inherit;\r\n$headings-font-weight: 400;\r\n$transition: all 0.3s ease;\r\n\r\n// dev2\r\n// dev3\r\n// dev4\r\n",".container {\r\n\tmax-width: 130rem;\r\n\twidth: 100%;\r\n\tmargin: auto;\r\n}\r\n\r\n.sr-only {\r\n\tposition: absolute !important;\r\n\twidth: 1px !important;\r\n\theight: 1px !important;\r\n\tpadding: 0 !important;\r\n\tmargin: -1px !important;\r\n\toverflow: hidden !important;\r\n\tclip: rect(0, 0, 0, 0) !important;\r\n\twhite-space: nowrap !important;\r\n\tborder: 0 !important;\r\n}\r\n","/* header */\r\n#header {\r\n}\r\n",".landing-page {\r\n\t.header-page {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\tpadding-top: 11.3rem;\r\n\t\tpadding-bottom: 5.6rem;\r\n\r\n\t\t@include media(\"<md\") {\r\n\t\t\tpadding-top: 3.5rem;\r\n\t\t\tpadding-bottom: 3.5rem;\r\n\t\t}\r\n\r\n\t\t.logo {\r\n\t\t\tmax-width: 26.8rem;\r\n\t\t\tdisplay: inline-flex;\r\n\r\n\t\t\t@include media(\"<md\") {\r\n\t\t\t\tmax-width: 15rem;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t.text-holder {\r\n\t\tfont-weight: 600;\r\n\t\tfont-size: 7.112rem;\r\n\t\tline-height: 1.23;\r\n\r\n\t\t@include media(\"<xl\") {\r\n\t\t\tfont-size: 5.112rem;\r\n\t\t}\r\n\r\n\t\t@include media(\"<md\") {\r\n\t\t\tfont-size: 2.5112rem;\r\n\t\t}\r\n\r\n\t\t@include media(\"<sm\") {\r\n\t\t\tfont-size: 2.112rem;\r\n\t\t}\r\n\r\n\t\tp {\r\n\t\t\tmargin-bottom: 0;\r\n\t\t}\r\n\r\n\t\t&.txt-center {\r\n\t\t\ttext-align: center;\r\n\t\t}\r\n\r\n\t\t&.txt-1 {\r\n\t\t\tpadding-top: 1.7rem;\r\n\t\t}\r\n\r\n\t\t&.txt-2 {\r\n\t\t\tmax-width: 105rem;\r\n\t\t\tmargin: auto auto 14.2rem;\r\n\r\n\t\t\t@include media(\"<md\") {\r\n\t\t\t\tmargin: auto auto 7.2rem;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t&.txt-3 {\r\n\t\t\tmargin-bottom: 3.2rem;\r\n\t\t}\r\n\r\n\t\t&.txt-4 {\r\n\t\t\tmargin-bottom: 8.2rem;\r\n\r\n\t\t\t@include media(\"<md\") {\r\n\t\t\t\tmargin-bottom: 4.2rem;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t.img-block {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\r\n\t\t.holder-1 {\r\n\t\t\tmax-width: 97rem;\r\n\t\t\tmargin-bottom: 1.7rem;\r\n\t\t}\r\n\r\n\t\t.holder-2 {\r\n\t\t\tmax-width: 120rem;\r\n\t\t\tmargin-bottom: 16rem;\r\n\r\n\t\t\t@include media(\"<md\") {\r\n\t\t\t\tmargin-bottom: 8rem;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t.holder-3 {\r\n\t\t\tmax-width: 120rem;\r\n\t\t\tmargin-bottom: 11rem;\r\n\r\n\t\t\t@include media(\"<md\") {\r\n\t\t\t\tmargin-bottom: 5.5rem;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t.holder-4 {\r\n\t\t\tmax-width: 120rem;\r\n\t\t\tmargin-bottom: 11.2rem;\r\n\r\n\t\t\t@include media(\"<md\") {\r\n\t\t\t\tmargin-bottom: 5.5rem;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\timg {\r\n\t\twidth: 100%;\r\n\t\theight: auto;\r\n\t}\r\n\r\n\t.list-block {\r\n\t\tpadding-left: 1rem;\r\n\t\tpadding-right: 1rem;\r\n\t\tpadding-bottom: 12.3rem;\r\n\t\toverflow: hidden;\r\n\r\n\t\t@include media(\"<md\") {\r\n\t\t\tpadding-bottom: 6rem;\r\n\t\t\ttext-align: center;\r\n\t\t}\r\n\r\n\t\t.inner-holder {\r\n\t\t\tmax-width: 77.1rem;\r\n\t\t\tmargin: auto;\r\n\t\t}\r\n\r\n\t\t.row {\r\n\t\t\t@include media(\">md\") {\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\tmargin-left: -3.9rem;\r\n\t\t\t\tmargin-right: -3.9rem;\r\n\t\t\t}\r\n\r\n\t\t\t.col {\r\n\t\t\t\t@include media(\">md\") {\r\n\t\t\t\t\twidth: 100%;\r\n\t\t\t\t\tpadding-left: 3.9rem;\r\n\t\t\t\t\tpadding-right: 3.9rem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tul {\r\n\t\t\tmargin: 0;\r\n\t\t\tpadding: 0;\r\n\t\t\tlist-style: none;\r\n\t\t\tfont-size: 2.5rem;\r\n\t\t\tline-height: 1.24;\r\n\r\n\t\t\t@include media(\"<md\") {\r\n\t\t\t\tfont-size: 1.7rem;\r\n\t\t\t}\r\n\r\n\t\t\tli {\r\n\t\t\t\tposition: relative;\r\n\r\n\t\t\t\t&:not(:last-child) {\r\n\t\t\t\t\tmargin-bottom: 4.7rem;\r\n\t\t\t\t\tpadding-bottom: 3.9rem;\r\n\r\n\t\t\t\t\t&::after {\r\n\t\t\t\t\t\tcontent: \"\";\r\n\t\t\t\t\t\tposition: absolute;\r\n\t\t\t\t\t\tleft: 0;\r\n\t\t\t\t\t\tbottom: 0;\r\n\t\t\t\t\t\twidth: 14.2rem;\r\n\t\t\t\t\t\theight: 0;\r\n\t\t\t\t\t\tborder-bottom: solid 0.1rem black;\r\n\r\n\t\t\t\t\t\t@include media(\"<md\") {\r\n\t\t\t\t\t\t\tleft: 50%;\r\n\t\t\t\t\t\t\ttransform: translateX(-50%);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","@charset \"UTF-8\";\r\n\r\n//     _            _           _                           _ _\r\n//    (_)          | |         | |                         | (_)\r\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\r\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\r\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\r\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\r\n//\r\n//      Simple, elegant and maintainable media queries in Sass\r\n//                        v1.4.9\r\n//\r\n//        https://eduardoboucas.github.io/include-media\r\n//\r\n//         Authors: Eduardo Boucas (@eduardoboucas)\r\n//                  Kitty Giraudel (@kittygiraudel)\r\n//\r\n//      This project is licensed under the terms of the MIT license\r\n////\r\n/// include-media library public configuration\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n\r\n///\r\n/// Creates a list of global breakpoints\r\n///\r\n/// @example scss - Creates a single breakpoint with the label `phone`\r\n///  $breakpoints: ('phone': 320px);\r\n///\r\n$breakpoints: (\r\n  'phone': 320px,\r\n  'tablet': 768px,\r\n  'desktop': 1024px\r\n) !default;\r\n\r\n\r\n///\r\n/// Creates a list of static expressions or media types\r\n///\r\n/// @example scss - Creates a single media type (screen)\r\n///  $media-expressions: ('screen': 'screen');\r\n///\r\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\r\n///  $media-expressions: (\r\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\r\n///  );\r\n///\r\n$media-expressions: (\r\n  'screen': 'screen',\r\n  'print': 'print',\r\n  'handheld': 'handheld',\r\n  'landscape': '(orientation: landscape)',\r\n  'portrait': '(orientation: portrait)',\r\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\r\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\r\n) !default;\r\n\r\n\r\n///\r\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\r\n///\r\n/// @example scss - Interval for pixels is defined as `1` by default\r\n///  @include media('>128px') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 129px) {}\r\n///\r\n/// @example scss - Interval for ems is defined as `0.01` by default\r\n///  @include media('>20em') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 20.01em) {}\r\n///\r\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\r\n///  @include media('>2.0rem') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 2.1rem) {}\r\n///\r\n$unit-intervals: (\r\n  'px': 1,\r\n  'em': 0.01,\r\n  'rem': 0.1,\r\n  '': 0\r\n) !default;\r\n\r\n///\r\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\r\n/// for browsers that don't support media queries.\r\n///\r\n/// @example scss - Disables support for media queries\r\n///  $im-media-support: false;\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n$im-media-support: true !default;\r\n\r\n///\r\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\r\n/// intercept the breakpoint will be displayed, any others will be ignored.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'tablet';\r\n///  @include media('>=desktop') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-breakpoint: 'desktop' !default;\r\n\r\n///\r\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\r\n/// are not supported.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'screen') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///   /* Generates: */\r\n///   .foo {\r\n///     color: tomato;\r\n///   }\r\n///\r\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'retina2x') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\r\n\r\n////\r\n/// Cross-engine logging engine\r\n/// @author Kitty Giraudel\r\n/// @access private\r\n////\r\n\r\n\r\n///\r\n/// Log a message either with `@error` if supported\r\n/// else with `@warn`, using `feature-exists('at-error')`\r\n/// to detect support.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@function im-log($message) {\r\n  @if feature-exists('at-error') {\r\n    @error $message;\r\n  } @else {\r\n    @warn $message;\r\n    $_: noop();\r\n  }\r\n\r\n  @return $message;\r\n}\r\n\r\n\r\n///\r\n/// Wrapper mixin for the log function so it can be used with a more friendly\r\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\r\n/// within functions because it is not possible to include a mixin in a function\r\n/// and use the mixin everywhere else because it's much more elegant.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@mixin log($message) {\r\n  @if im-log($message) {}\r\n}\r\n\r\n\r\n///\r\n/// Function with no `@return` called next to `@warn` in Sass 3.3\r\n/// to trigger a compiling error and stop the process.\r\n///\r\n@function noop() {}\r\n\r\n///\r\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\r\n///\r\n@function im-intercepts-static-breakpoint($conditions...) {\r\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\r\n\r\n  @if not $no-media-breakpoint-value {\r\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\r\n  }\r\n\r\n  @each $condition in $conditions {\r\n    @if not map-has-key($media-expressions, $condition) {\r\n      $operator: get-expression-operator($condition);\r\n      $prefix: get-expression-prefix($operator);\r\n      $value: get-expression-value($condition, $operator);\r\n\r\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\r\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\r\n        @return false;\r\n      }\r\n    } @else if not index($im-no-media-expressions, $condition) {\r\n      @return false;\r\n    }\r\n  }\r\n\r\n  @return true;\r\n}\r\n\r\n////\r\n/// Parsing engine\r\n/// @author Kitty Giraudel\r\n/// @access private\r\n////\r\n\r\n\r\n///\r\n/// Get operator of an expression\r\n///\r\n/// @param {String} $expression - Expression to extract operator from\r\n///\r\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\r\n///\r\n@function get-expression-operator($expression) {\r\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\r\n    @if str-index($expression, $operator) {\r\n      @return $operator;\r\n    }\r\n  }\r\n\r\n  // It is not possible to include a mixin inside a function, so we have to\r\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n  // functions cannot be called anywhere in Sass, we need to hack the call in\r\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n  $_: im-log('No operator found in `#{$expression}`.');\r\n}\r\n\r\n\r\n///\r\n/// Get dimension of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract dimension from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {String} - `width` or `height` (or potentially anything else)\r\n///\r\n@function get-expression-dimension($expression, $operator) {\r\n  $operator-index: str-index($expression, $operator);\r\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\r\n  $dimension: 'width';\r\n\r\n  @if str-length($parsed-dimension) > 0 {\r\n    $dimension: $parsed-dimension;\r\n  }\r\n\r\n  @return $dimension;\r\n}\r\n\r\n\r\n///\r\n/// Get dimension prefix based on an operator\r\n///\r\n/// @param {String} $operator - Operator\r\n///\r\n/// @return {String} - `min` or `max`\r\n///\r\n@function get-expression-prefix($operator) {\r\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\r\n}\r\n\r\n\r\n///\r\n/// Get value of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract value from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {Number} - A numeric value\r\n///\r\n@function get-expression-value($expression, $operator) {\r\n  $operator-index: str-index($expression, $operator);\r\n  $value: str-slice($expression, $operator-index + str-length($operator));\r\n\r\n  @if map-has-key($breakpoints, $value) {\r\n    $value: map-get($breakpoints, $value);\r\n  } @else {\r\n    $value: to-number($value);\r\n  }\r\n\r\n  $interval: map-get($unit-intervals, unit($value));\r\n\r\n  @if not $interval {\r\n    // It is not possible to include a mixin inside a function, so we have to\r\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n    // functions cannot be called anywhere in Sass, we need to hack the call in\r\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n    $_: im-log('Unknown unit `#{unit($value)}`.');\r\n  }\r\n\r\n  @if $operator == '>' {\r\n    $value: $value + $interval;\r\n  } @else if $operator == '<' {\r\n    $value: $value - $interval;\r\n  }\r\n\r\n  @return $value;\r\n}\r\n\r\n\r\n///\r\n/// Parse an expression to return a valid media-query expression\r\n///\r\n/// @param {String} $expression - Expression to parse\r\n///\r\n/// @return {String} - Valid media query\r\n///\r\n@function parse-expression($expression) {\r\n  // If it is part of $media-expressions, it has no operator\r\n  // then there is no need to go any further, just return the value\r\n  @if map-has-key($media-expressions, $expression) {\r\n    @return map-get($media-expressions, $expression);\r\n  }\r\n\r\n  $operator: get-expression-operator($expression);\r\n  $dimension: get-expression-dimension($expression, $operator);\r\n  $prefix: get-expression-prefix($operator);\r\n  $value: get-expression-value($expression, $operator);\r\n\r\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\r\n}\r\n\r\n///\r\n/// Slice `$list` between `$start` and `$end` indexes\r\n///\r\n/// @access private\r\n///\r\n/// @param {List} $list - List to slice\r\n/// @param {Number} $start [1] - Start index\r\n/// @param {Number} $end [length($list)] - End index\r\n///\r\n/// @return {List} Sliced list\r\n///\r\n@function slice($list, $start: 1, $end: length($list)) {\r\n  @if length($list) < 1 or $start > $end {\r\n    @return ();\r\n  }\r\n\r\n  $result: ();\r\n\r\n  @for $i from $start through $end {\r\n    $result: append($result, nth($list, $i));\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n////\r\n/// String to number converter\r\n/// @author Kitty Giraudel\r\n/// @access private\r\n////\r\n\r\n\r\n///\r\n/// Casts a string into a number\r\n///\r\n/// @param {String | Number} $value - Value to be parsed\r\n///\r\n/// @return {Number}\r\n///\r\n@function to-number($value) {\r\n  @if type-of($value) == 'number' {\r\n    @return $value;\r\n  } @else if type-of($value) != 'string' {\r\n    $_: im-log('Value for `to-number` should be a number or a string.');\r\n  }\r\n\r\n  $first-character: str-slice($value, 1, 1);\r\n  $result: 0;\r\n  $digits: 0;\r\n  $minus: ($first-character == '-');\r\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\r\n\r\n  // Remove +/- sign if present at first character\r\n  @if ($first-character == '+' or $first-character == '-') {\r\n    $value: str-slice($value, 2);\r\n  }\r\n\r\n  @for $i from 1 through str-length($value) {\r\n    $character: str-slice($value, $i, $i);\r\n\r\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\r\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\r\n    }\r\n\r\n    @if $character == '.' {\r\n      $digits: 1;\r\n    } @else if $digits == 0 {\r\n      $result: $result * 10 + map-get($numbers, $character);\r\n    } @else {\r\n      $digits: $digits * 10;\r\n      $result: $result + map-get($numbers, $character) / $digits;\r\n    }\r\n  }\r\n\r\n  @return if($minus, -$result, $result);\r\n}\r\n\r\n\r\n///\r\n/// Add `$unit` to `$value`\r\n///\r\n/// @param {Number} $value - Value to add unit to\r\n/// @param {String} $unit - String representation of the unit\r\n///\r\n/// @return {Number} - `$value` expressed in `$unit`\r\n///\r\n@function to-length($value, $unit) {\r\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\r\n\r\n  @if not index(map-keys($units), $unit) {\r\n    $_: im-log('Invalid unit `#{$unit}`.');\r\n  }\r\n\r\n  @return $value * map-get($units, $unit);\r\n}\r\n\r\n///\r\n/// This mixin aims at redefining the configuration just for the scope of\r\n/// the call. It is helpful when having a component needing an extended\r\n/// configuration such as custom breakpoints (referred to as tweakpoints)\r\n/// for instance.\r\n///\r\n/// @author Kitty Giraudel\r\n///\r\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\r\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\r\n///\r\n/// @example scss - Extend the global breakpoints with a tweakpoint\r\n///  @include media-context(('custom': 678px)) {\r\n///    .foo {\r\n///      @include media('>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend the global media expressions with a custom one\r\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend both configuration maps\r\n///  @include media-context(('custom': 678px), ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\r\n  // Save global configuration\r\n  $global-breakpoints: $breakpoints;\r\n  $global-media-expressions: $media-expressions;\r\n\r\n  // Update global configuration\r\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\r\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\r\n\r\n  @content;\r\n\r\n  // Restore global configuration\r\n  $breakpoints: $global-breakpoints !global;\r\n  $media-expressions: $global-media-expressions !global;\r\n}\r\n\r\n////\r\n/// include-media public exposed API\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n\r\n///\r\n/// Generates a media query based on a list of conditions\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @example scss - With a single set breakpoint\r\n///  @include media('>phone') { }\r\n///\r\n/// @example scss - With two set breakpoints\r\n///  @include media('>phone', '<=tablet') { }\r\n///\r\n/// @example scss - With custom values\r\n///  @include media('>=358px', '<850px') { }\r\n///\r\n/// @example scss - With set breakpoints with custom values\r\n///  @include media('>desktop', '<=1350px') { }\r\n///\r\n/// @example scss - With a static expression\r\n///  @include media('retina2x') { }\r\n///\r\n/// @example scss - Mixing everything\r\n///  @include media('>=350px', '<tablet', 'retina3x') { }\r\n///\r\n@mixin media($conditions...) {\r\n  @if ($im-media-support and length($conditions) == 0) or\r\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\r\n    @content;\r\n  } @else if ($im-media-support and length($conditions) > 0) {\r\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\r\n      // Recursive call\r\n      @include media(slice($conditions, 2)...) {\r\n        @content;\r\n      }\r\n    }\r\n  }\r\n}\r\n","@import \"_vars\";\r\n\r\n@font-face {\r\n\tfont-family: \"SF Pro Display\";\r\n\tsrc: url(\"#{$fonts}SFProDisplay-Semibold.woff2\") format(\"woff2\"), url(\"#{$fonts}SFProDisplay-Semibold.woff\") format(\"woff\");\r\n\tfont-weight: 600;\r\n\tfont-style: normal;\r\n\tfont-display: swap;\r\n}\r\n\r\n@font-face {\r\n\tfont-family: \"SF Pro Display\";\r\n\tsrc: url(\"#{$fonts}SFProDisplay-Regular.woff2\") format(\"woff2\"), url(\"#{$fonts}SFProDisplay-Regular.woff\") format(\"woff\");\r\n\tfont-weight: normal;\r\n\tfont-style: normal;\r\n\tfont-display: swap;\r\n}\r\n"]}